class Solution {
    public int minJumps(int[] arr) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int n = arr.length;
        boolean[] visited = new boolean[50001];
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0; i < n; i++){
            if(!map.containsKey(arr[i]))
                map.put(arr[i], new ArrayList<>());
            map.get(arr[i]).add(i);
        }
        
        int minJump = 0;
        visited[0] = true;
        q.add(0);

        while(!q.isEmpty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                int front = q.poll();
                if(front == n-1) // reached the last index
                    return minJump;
                List<Integer> indexes = map.get(arr[front]);
                indexes.add(front + 1);
                indexes.add(front - 1);
                for(int index : indexes){
                    if(index >= 0 && index < n && !visited[index]){
                        q.add(index);
                        visited[index] = true;
                    }
                }
                indexes.clear();
            }
            minJump++;
        }

        return 0;
    }
}